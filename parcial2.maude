fmod PARCIAL is

protecting INT .
protecting STRING .
protecting FLOAT .
protecting BOOL .


sort hotel . ***1.1
sort viajero .

sort Lhotel . ***2.1
sort Lv . ***3.1

subsort hotel < Lhotel . ***2.1
subsort viajero < Lv . ***3.1

op hotel(_,_,_,_,_,_) : Int String Float String Float Float -> hotel [ctor] . ***1.1
op viajero(_,_,_,_) : Int String hotel Float -> viajero [ctor] .

op nilLhotel : -> Lhotel [ctor] . ***2.1
op _ _ : hotel hotel -> Lhotel  [ctor assoc id: nilLhotel] .


op calcular(_,_,_) : Float hotel viajero -> Float . ***1.2

op hallar(_,_,_) : Float Lhotel viajero -> hotel .  ***2.2
op minx(_,_,_,_) : Float Lhotel viajero Float -> Bool .

vars IHO ID : Int .
vars NM NA ML : String .
vars CT PR VP PT N AC : Float .
var HT : hotel .
var LH : Lhotel .

eq calcular(N,hotel(IHO,NM,CT,NA,PR,VP),viajero(ID,ML,HT,PT)) = (0.03 * CT) * (N * PR) .  ***1.2
ceq calcular(N,hotel(IHO,NM,CT,NA,PR,VP),viajero(ID,ML,HT,PT)) = (((N * PR) + ((0.03 * CT) * (N * PR))) - (VP * PT)) if ((N * PR) >= (PT * VP)) . 


eq hallar(N,nilLhotel,viajero(ID,ML,HT,PT)) = nilLhotel .  ***2.2
eq hallar(N,hotel(IHO,NM,CT,NA,PR,VP) LH,viajero(ID,ML,HT,PT)) = hallar(N,LH,viajero(ID,ML,HT,PT)) .
ceq hallar(N,hotel(IHO,NM,CT,NA,PR,VP) LH,viajero(ID,ML,HT,PT)) = hotel(IHO,NM,CT,NA,PR,VP) if ((CT >= 3.0) and (minx(N,LH,viajero(ID,ML,HT,PT),calcular(N,hotel(IHO,NM,CT,NA,PR,VP),viajero(ID,ML,HT,PT))))) .


eq minx(N,nilLhotel,viajero(ID,ML,HT,PT),AC) = true .
eq minx(N,hotel(IHO,NM,CT,NA,PR,VP),viajero(ID,ML,HT,PT),AC) = true .
ceq minx(N,hotel(IHO,NM,CT,NA,PR,VP) LH,viajero(ID,ML,HT,PT),AC) = minx(N,LH,viajero(ID,ML,HT,PT),calcular(N,hotel(IHO,NM,CT,NA,PR,VP),viajero(ID,ML,HT,PT))) if (AC > calcular(N,hotel(IHO,NM,CT,NA,PR,VP),viajero(ID,ML,HT,PT))) . ***Revisar la comparación porque hasta aquí
ceq minx(N,hotel(IHO,NM,CT,NA,PR,VP) LH,viajero(ID,ML,HT,PT),AC) = false if (AC > calcular(N,hotel(IHO,NM,CT,NA,PR,VP),viajero(ID,ML,HT,PT))) .


endfm
